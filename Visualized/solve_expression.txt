if input0 == 'dcr::constexpr':
    return input0.'value'
if input0 == 'dcr::input':
    assert input1.'dc::runtime_inputs'.exist(target.'dc::index' === input0.'dc::index')
    return input1.'dc::runtime_inputs'.find(target.'dc::index' === input0.'dc::index').'value'
if input0 == 'dcr::reg':
    reg0 &= input0.'dc::index'
    assert input1.'dc::runtime_registers'.exist(target.'dc::index' === reg0)
    return input1.'dc::runtime_registers'.find(target.'dc::index' === reg0).'value'
if input0 == 'dcr::iterator':
    assert input1.'dc::runtime_iterators'.exist(target.'dc::index' === input0.'dc::index')
    return input1.'dc::runtime_iterators'.find(target.'dc::index' === input0.'dc::index').'value'
if input0 == 'dcr::call':
    reg0 &= input0.'dc::function_name'
    reg1 &= input0.'dc::function_params'
    reg2 &= 'list'
    for i in range(reg1.size):
        reg2[i] &= 'func::solve_expression'(reg1[i], input1, input2)
    if 'func::is_code_dynamic'(reg0):
        return 'func::run_dynamic_code_object'('func::get_dynamic_code_object'(reg0), reg2)
    return 'func::run_hardcoded_code'(reg0, reg2)
if input0 == 'dcr::concept_instance':
    return 'func::create_concept_instance'(input0.'dc::concept_name')
if input0 == 'dcr::size':
    reg0 &= 'func::solve_expression'(input0.'dc::target_list', input1, input2)
    if reg0 == Fail:
        return Fail
    return reg0.size
if input0 == 'dcr::at':
    reg0 &= 'func::solve_expression'(input0.'dc::target_list', input1, input2)
    reg1 &= 'func::solve_expression'(input0.'dc::element_index', input1, input2)
    if reg0 == Fail or reg1 == Fail:
        return Fail
    return reg0[reg1]
if input0 == 'dcr::get_member':
    reg0 &= 'func::solve_expression'(input0.'dc::target_object', input1, input2)
    if reg0 == Fail:
        return Fail
    return 'func::get_object_member'(reg0, input0.'dc::member_name')
if input0 == 'dcr::target':
    assert input2 != None
    return input2
if (input0 == 'dcr::find' or input0 == 'dcr::exist'):
    reg0 &= 'func::solve_expression'(input0.'dc::target_list', input1, input2)
    if reg0 == Fail:
        return Fail
    for i in range(reg0.size):
        if 'func::solve_expression'(input0.'dc::expression_for_constraint', input1, reg0[i]):
            if input0 == 'dcr::find':
                return reg0[i]
            else:
                return True
    if input0 == 'dcr::find':
        return Fail
    else:
        return False
if input0 == 'dcr::count':
    reg0 &= 'func::solve_expression'(input0.'dc::target_list', input1, input2)
    if reg0 == Fail:
        return Fail
    reg1 &= 0
    for i in range(reg0.size):
        if 'func::solve_expression'(input0.'dc::expression_for_constraint', input1, reg0[i]):
            'func::increment'(reg1, 1)
    return reg1
assert False